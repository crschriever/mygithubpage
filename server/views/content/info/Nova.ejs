<%
let title = 'Nova';
let sideBarItems = ['Inspiration', 'Features', 'Outcomes', 'Next Steps'];
let content = `
<div id="Inspiration">
    <h2>Inspiration</h2>
    <p>
        I learned to program by diving in and writing code, not by taking tests and quizzes.
        Homework is a good way of forcing students to write code but by the time most students
        get responses to homework, they've forgotten what they were thinking while writing
        the code or are too lazy to go back and check what they got points off for.
    </p>
    <p>
        Students use Nova to get additional practice by solving coding challenges that
        correspond with the concepts they're learning in class. Challenges are separated
        by category and difficulty which allows students to search for exactly what they need.
        Nova provides instant feedback on both correctness and style.
    </p>
</div>
<div id="Features">
    <h2>Features</h2>
    <h3>Sleek Code Editing Experience</h3>
    <img class="lazy-load nova-img img-inline" data-src="/res/nova-editor.jpg" alt="The multi-file in-browser editor of Nova">
    <p>
        The in-browser code editor that students use to write their solutions is made
        using <a href="https://codemirror.net/">Code Mirror</a>. The code editor has
        several nice features like syntax highlighting, undo/redo, code completion,
        multiple cursors, and code folding. I also added multi-file editing capabilities
        on top of the basic Code Mirror editor.
    </p>
    <p>
        The student's solution is periodically saved to the browser's local storage.
        Students have the option to restore the default code given at the beginning
        of the challenge at any time.
    </p>
    <p>
        The editor resizes as the student adds or deletes code.
    </p>
    <p>
        Most of the html in Nova is rendered with server side templates but the
        editor is made with React. I chose to build this way because server side
        rendering tends to be quicker and most of the html is static after rendering.
        The editor however is a piece of html that changes frequently (like when changing files).
        These changes are handled with React.
    </p>

    <h3>Safe Student-Submitted Code Execution</h3>
    <p>
        Nova runs student-submitted code on the server which is an obvious vector of
        attack that bad actors could exploit. To safeguard against malicious code, students'
        solutions are ran and tested inside of a Docker container. Certain actions are
        also prohibited using a java.security file.
    </p>
    <p>
        I also plan on implementing a whitelist of which classes can be imported.
    </p>

    <h3>Java Testing Framework</h3>
    <p>
        I decided to make my own testing framework rather than use an already existing library
        like JUnit. I wanted to be able to create tests for challenges by writing an
        approved solution and then giving input to test with. This way, at some point in
        the future, Nova could allow students to test their solutions with custom input.
        Also, I was able to make my testing framework more specific to Nova by including
        specific domain language and having features that make writing tests for challenges
        quicker.
    </p>
    <p>
        The testing framework for Nova captures standard out by default and presents
        it to the students so they can debug. It also handles non-compiling code,
        misnamed classes and methods, infinite loops, and unexpected Runtime Exceptions.
    </p>
    <p>There are currently four types of testers supported by the framework</p>
    <ol>
        <li>Main method: <strong>input-</strong> Command line arguments, <strong>tests-</strong> Standard Out.</li>
        <li>Method: <strong>input-</strong> Method arguments, <strong>tests-</strong> Return value.</li>
        <li>Class: <strong>tests-</strong> The methods and fields of the class (Calls methods and looks at class side effects).</li>
        <li>Group: allows the challenge to involve multiple, methods or classes. Made by composing method and class testers.</li>
    </ol>

    <h3>Admin Content Management System</h3>
    <h3>Georgia Tech CAS Sign In</h3>
</div>
<div id="Outcomes">
    <h2>Outcomes</h2>
</div>
<div id="NextSteps">
    <h2>Next Steps</h2>
</div>
`;

let readMore = [
    {text: "Teacher's Assistant at Georgia Tech", href: "/info/1331-ta"},
    {text: "Google Home Personal Project", href: "/info/GoogleHomeVisual"}
];
%>

    <%- include('../../partials/info.ejs', {title, sideBarItems, content, readMore}); %>